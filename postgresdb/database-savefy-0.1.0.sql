/**
* Production em: v11
* Criação da aplicação.
* heroku pg:psql postgresql-convex-43609 --app savefy-staging < /Users/eriklacerda/Dev-Projects/savefy/postgresdb/database-savefy-0.1.0.sql
* Localhost  -- \i /Users/eriklacerda/Dev-Projects/savefy/postgresdb/database-savefy-0.1.0.sql
*/

 DROP TABLE IF EXISTS ASSET_PRICE;
 DROP TABLE IF EXISTS QUOTE_SALE;
 DROP TABLE IF EXISTS CONCILIATION_ENTRY;
 DROP TABLE IF EXISTS CONCILIATION;
 DROP TABLE IF EXISTS PATRIMONY_ENTRY;
 DROP TABLE IF EXISTS PATRIMONY;
 DROP TABLE IF EXISTS STOCK_SALE;
 DROP TABLE IF EXISTS ACCOUNT_ENTRY;
 DROP TABLE IF EXISTS ACCOUNT;
 DROP TABLE IF EXISTS CATEGORY_PREDICTION;
 DROP TABLE IF EXISTS SANITIZE_PATTERN;
 DROP TABLE IF EXISTS SUBCATEGORY;
 DROP TABLE IF EXISTS CATEGORY;
 DROP TABLE IF EXISTS USER_PREFERENCES;
 DROP TABLE IF EXISTS INSTITUTION;
 DROP TABLE IF EXISTS user_role;
 DROP TABLE IF EXISTS user_account;
 DROP TABLE IF EXISTS USER_GROUP;
 DROP TABLE IF EXISTS remember_me_token;
 DROP TABLE IF EXISTS BENCHMARK;


CREATE TABLE BENCHMARK (
    ID          SERIAL PRIMARY KEY,
    DATE        TIMESTAMP NOT NULL,
    CDI         DECIMAL,
    IBOVESPA    DECIMAL
);


CREATE TABLE remember_me_token (
	id 			SERIAL PRIMARY KEY,
	date 		TIMESTAMP,
	series 		VARCHAR(255),
	token_value VARCHAR(255),
	username 	VARCHAR(255)
);

CREATE TABLE USER_GROUP (
	ID   SERIAL PRIMARY KEY,
	NAME VARCHAR(255)
);

CREATE TABLE user_account (
	id 				SERIAL PRIMARY KEY,
	account_locked 	BOOLEAN,
	display_name 	VARCHAR(255),
	email 			VARCHAR(255) UNIQUE,
	image_url 		VARCHAR(255),
	password 		VARCHAR(64),
	trusted_account BOOLEAN,
	google_id       VARCHAR(255) UNIQUE,
	web_site 		VARCHAR(255),
	GROUP_ID        INTEGER REFERENCES USER_GROUP(ID)
);

CREATE TABLE user_role (
	user_id INTEGER REFERENCES user_account(id),
	role    VARCHAR(255),
	PRIMARY KEY (user_id, role)
);

CREATE TABLE CATEGORY (
	ID      SERIAL PRIMARY KEY,
	NAME    VARCHAR(50),
	TYPE    VARCHAR(3), --EXP - expenses, INC - incomes, INV - investiments
	USER_GROUP_ID INTEGER REFERENCES USER_GROUP(id),

	CONSTRAINT U_CONST_01 UNIQUE (USER_GROUP_ID,NAME,TYPE)
);

CREATE TABLE SUBCATEGORY (
	ID             SERIAL PRIMARY KEY,
	NAME           VARCHAR(50),
	ACTIVATED      BOOLEAN NOT NULL,
	TYPE           VARCHAR(1), --E - essential, S - superfluous
	CATEGORY_ID    INTEGER REFERENCES CATEGORY(ID),
	USER_GROUP_ID  INTEGER NOT NULL REFERENCES USER_GROUP(id),

	CONSTRAINT U_CONST_02 UNIQUE (USER_GROUP_ID,CATEGORY_ID,NAME)
);

CREATE TABLE CATEGORY_PREDICTION (
	ID                  SERIAL PRIMARY KEY,
	DESCRIPTION         VARCHAR(50) NOT NULL,
	SUBCATEGORY_ID      INTEGER NOT NULL REFERENCES SUBCATEGORY(ID),
	TIMES_USED          INTEGER NOT NULL DEFAULT 0,
	TIMES_REJECTED         INTEGER NOT NULL DEFAULT 0,
	USER_GROUP_ID       INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE SANITIZE_PATTERN (
	ID                  SERIAL PRIMARY KEY,
	PATTERN             VARCHAR(50) NOT NULL,
	REPLACE_FOR         VARCHAR(50) NOT NULL
);

CREATE TABLE INSTITUTION (
    ID              SERIAL PRIMARY KEY,
    NAME            VARCHAR(50) NOT NULL
);

CREATE TABLE ACCOUNT (
	ID                          SERIAL PRIMARY KEY,
	NAME                        VARCHAR(50),
	INSTITUTION                 INTEGER NOT NULL REFERENCES INSTITUTION(id),
	TYPE                        VARCHAR(3), --CKA - checking account, SVA - saving account, INV - investment, CCA - credit card account
	ACTIVATED                   BOOLEAN NOT NULL,
	START_BALANCE               DECIMAL,
	LAST_UPDATE                 TIMESTAMP NOT NULL,
	USER_GROUP_ID               INTEGER NOT NULL REFERENCES USER_GROUP(id),
    PRODUCT                     VARCHAR(50),
    ADMIN_TAX                   DECIMAL,
    RISK                        VARCHAR(10),
    LIQUIDITY_TYPE              VARCHAR(10),
    LIQUIDITY_DAYS              INTEGER,
    LIQUIDITY_DUE_DATE          TIMESTAMP,
    BROKER_ACCOUNT_ID           INTEGER REFERENCES ACCOUNT(ID),
    DFLT_SUBCATEGORY_ID         INTEGER REFERENCES SUBCATEGORY(ID)
);

CREATE TABLE ACCOUNT_ENTRY (
	ID                  SERIAL PRIMARY KEY,
	DATE                TIMESTAMP NOT NULL,
	AMOUNT              DECIMAL NOT NULL,
	TYPE                VARCHAR(3), --CKA - checking account, SVA - saving account, INV - investment, CCA - credit card account
	ACCOUNT_ID          INTEGER NOT NULL REFERENCES ACCOUNT(ID),
	ACCOUNT_DESTINY_ID  INTEGER REFERENCES ACCOUNT(ID),
	TWIN_ENTRY_ID       INTEGER,
	TRANSFER            BOOLEAN,
	SUBCATEGORY_ID      INTEGER REFERENCES SUBCATEGORY(ID),
	USER_GROUP_ID       INTEGER NOT NULL REFERENCES USER_GROUP(id),
	OPERATION           VARCHAR(10), -- PURCHASE - SALE
    QUOTES              DECIMAL,
    QUOTE_VALUE         DECIMAL,
    LAST_PRICE          DECIMAL,
    QUOTES_AVAILABLE    DECIMAL,
    CURRENT_AMOUNT      DECIMAL,
    INCOME_TAX_PERCENT  DECIMAL,
    INCOME_TAX_AMOUNT   DECIMAL,
    IOF                 DECIMAL,
    GROSS_PROFITABILITY DECIMAL,
    PERCENT_GROSS_PROFITABILITY DECIMAL,
    NET_PROFITABILITY   DECIMAL,
    PERCENT_NET_PROFITABILITY DECIMAL,
    STOCK_CODE          VARCHAR(5)
);

CREATE TABLE STOCK_SALE (
    ID                  SERIAL PRIMARY KEY,
	ACCOUNT_ID          INTEGER NOT NULL REFERENCES ACCOUNT(ID),
    DATE                TIMESTAMP NOT NULL,
    TYPE                VARCHAR(3) NOT NULL,
    NEGOTIATED          DECIMAL NOT NULL,
    PROFIT              DECIMAL NOT NULL,
    INCOME_TAX          DECIMAL NOT NULL,
	USER_GROUP_ID       INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE QUOTE_SALE (
    ID                  SERIAL PRIMARY KEY,
    PURCHASE_ENTRY_ID   INTEGER NOT NULL REFERENCES ACCOUNT_ENTRY(ID),
    SALE_ENTRY_ID       INTEGER NOT NULL REFERENCES ACCOUNT_ENTRY(ID),
    QTD_QUOTES          DECIMAL NOT NULL,
    BROKERAGE           DECIMAL NOT NULL DEFAULT 0.0
);

CREATE TABLE CONCILIATION (
	ID                  SERIAL PRIMARY KEY,
	DATE                TIMESTAMP NOT NULL,
	ACCOUNT_ID          INTEGER NOT NULL REFERENCES ACCOUNT(ID),
	IMPORTED            BOOLEAN NOT NULL,
	USER_GROUP_ID       INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE CONCILIATION_ENTRY (
	ID                  SERIAL PRIMARY KEY,
	DATE                TIMESTAMP NOT NULL,
	DESCRIPTION         VARCHAR(50) NOT NULL,
	SUBCATEGORY_ID      INTEGER REFERENCES SUBCATEGORY(ID),
	ACCOUNT_ENTRY_ID    INTEGER REFERENCES ACCOUNT_ENTRY(ID),
	AMOUNT              DECIMAL NOT NULL,
	REJECT              BOOLEAN NOT NULL,
	CONCILIATION_ID     INTEGER REFERENCES CONCILIATION(ID),
	USER_GROUP_ID       INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE PATRIMONY (
	ID                      SERIAL PRIMARY KEY,
	DATE                    TIMESTAMP NOT NULL,
	BALANCE                 DECIMAL NOT NULL,
	BALANCE_INVESTED        DECIMAL NOT NULL,
	INCREASED_BALANCE       DECIMAL NOT NULL,
	PCT_INCREASED_BALANCE   DECIMAL NOT NULL,
	PROFIT                  DECIMAL NOT NULL,
	INCREASED_PROFIT        DECIMAL NOT NULL,
	PCT_INCREASED_PROFIT    DECIMAL NOT NULL,
	USER_GROUP_ID           INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE PATRIMONY_ENTRY (
	ID                      SERIAL PRIMARY KEY,
	NAME                    VARCHAR(255) NOT NULL,
	DATE                    TIMESTAMP NOT NULL,
	ASSET_TYPE              VARCHAR(3), --CKA - checking account, SVA - saving account, INV - investment, CCA - credit card account
	ACCOUNT_ID              INTEGER NOT NULL REFERENCES ACCOUNT(ID),
	PATRIMONY_ID            INTEGER REFERENCES PATRIMONY(ID),
	BALANCE                 DECIMAL NOT NULL,
	INCREASED_BALANCE       DECIMAL NOT NULL,
	PCT_INCREASED_BALANCE   DECIMAL NOT NULL,
	PROFIT                  DECIMAL NOT NULL,
	INCREASED_PROFIT        DECIMAL NOT NULL,
	PCT_INCREASED_PROFIT    DECIMAL NOT NULL,
	USER_GROUP_ID           INTEGER NOT NULL REFERENCES USER_GROUP(id)
);

CREATE TABLE USER_PREFERENCES (
    ID                          SERIAL PRIMARY KEY,
    UPDATE_INSTALLMENT_DATE     BOOLEAN,
    USER_GROUP_ID               INTEGER NOT NULL REFERENCES USER_GROUP(id),

    CONSTRAINT U_CONST_04 UNIQUE (USER_GROUP_ID)
);
